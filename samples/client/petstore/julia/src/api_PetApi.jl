# NOTE: This file is autogenerated by OpenAPI Generator (https://openapi-generator.tech).
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct PetApi <: SwaggerApi
    client::Swagger.Client
end

"""
Add a new pet to the store

Param: Pet::Pet (required)
Return: Nothing
"""
function addPet(_api::PetApi, Pet; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", Nothing, "/pet", ["petstore_auth"], Pet)
    Swagger.set_header_accept(_ctx, [])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", "application/xml"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""
Deletes a pet

Param: petId::Int64 (required)
Param: api_key::String
Return: Nothing
"""
function deletePet(_api::PetApi, petId::Int64; api_key=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "DELETE", Nothing, "/pet/{petId}", ["petstore_auth"])
    Swagger.set_param(_ctx.path, "petId", petId)  # type Int64
    Swagger.set_param(_ctx.header, "api_key", api_key)  # type String
    Swagger.set_header_accept(_ctx, [])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    Swagger.exec(_ctx)
end

"""
Finds Pets by status
Multiple status values can be provided with comma separated strings
Param: status::Vector{String} (required)
Return: Vector{Pet}
"""
function findPetsByStatus(_api::PetApi, status::Vector{String}; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", Vector{Pet}, "/pet/findByStatus", ["petstore_auth"])
    Swagger.set_param(_ctx.query, "status", status; collection_format="csv")  # type Vector{String}
    Swagger.set_header_accept(_ctx, ["application/xml", "application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    Swagger.exec(_ctx)
end

"""
Finds Pets by tags
Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
Param: tags::Vector{String} (required)
Return: Vector{Pet}
"""
function findPetsByTags(_api::PetApi, tags::Vector{String}; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", Vector{Pet}, "/pet/findByTags", ["petstore_auth"])
    Swagger.set_param(_ctx.query, "tags", tags; collection_format="csv")  # type Vector{String}
    Swagger.set_header_accept(_ctx, ["application/xml", "application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    Swagger.exec(_ctx)
end

"""
Find pet by ID
Returns a single pet
Param: petId::Int64 (required)
Return: Pet
"""
function getPetById(_api::PetApi, petId::Int64; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", Pet, "/pet/{petId}", ["api_key"])
    Swagger.set_param(_ctx.path, "petId", petId)  # type Int64
    Swagger.set_header_accept(_ctx, ["application/xml", "application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    Swagger.exec(_ctx)
end

"""
Update an existing pet

Param: Pet::Pet (required)
Return: Nothing
"""
function updatePet(_api::PetApi, Pet; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PUT", Nothing, "/pet", ["petstore_auth"], Pet)
    Swagger.set_header_accept(_ctx, [])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", "application/xml"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""
Updates a pet in the store with form data

Param: petId::Int64 (required)
Param: name::String
Param: status::String
Return: Nothing
"""
function updatePetWithForm(_api::PetApi, petId::Int64; name=nothing, status=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", Nothing, "/pet/{petId}", ["petstore_auth"])
    Swagger.set_param(_ctx.path, "petId", petId)  # type Int64
    Swagger.set_param(_ctx.file, "name", name)  # type String
    Swagger.set_param(_ctx.file, "status", status)  # type String
    Swagger.set_header_accept(_ctx, [])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/x-www-form-urlencoded"] : [_mediaType])
    Swagger.exec(_ctx)
end

"""
uploads an image

Param: petId::Int64 (required)
Param: additionalMetadata::String
Param: file::String
Return: ApiResponse
"""
function uploadFile(_api::PetApi, petId::Int64; additionalMetadata=nothing, file=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", ApiResponse, "/pet/{petId}/uploadImage", ["petstore_auth"])
    Swagger.set_param(_ctx.path, "petId", petId)  # type Int64
    Swagger.set_param(_ctx.file, "additionalMetadata", additionalMetadata)  # type String
    Swagger.set_param(_ctx.file, "file", file)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["multipart/form-data"] : [_mediaType])
    Swagger.exec(_ctx)
end

export addPet, deletePet, findPetsByStatus, findPetsByTags, getPetById, updatePet, updatePetWithForm, uploadFile
