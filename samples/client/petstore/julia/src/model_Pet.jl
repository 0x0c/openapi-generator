# NOTE: This file is autogenerated by OpenAPI Generator (https://openapi-generator.tech).
# Do not modify this file directly. Modify the OpenAPI specification instead.


mutable struct Pet <: SwaggerModel
    id::Union{ Nothing, Int64 } # id
    category::Union{ Nothing, Category } # category
    name::Union{ Nothing, String } # name
    photoUrls::Union{ Nothing, Vector{String} } # photoUrls
    tags::Union{ Nothing, Vector{Tag} } # tags
    status::Union{ Nothing, String } # status

    function Pet(;id=nothing, category=nothing, name=nothing, photoUrls=nothing, tags=nothing, status=nothing)
        o = new()
        set_field!(o, :id, id)
        set_field!(o, :category, category)
        set_field!(o, :name, name)
        set_field!(o, :photoUrls, photoUrls)
        set_field!(o, :tags, tags)
        set_field!(o, :status, status)
        o
    end
end # type Pet

const _name_map_Pet = Dict{String,Symbol}(["id"=>:id, "category"=>:category, "name"=>:name, "photoUrls"=>:photoUrls, "tags"=>:tags, "status"=>:status])
const _field_map_Pet = Dict{Symbol,String}([:id=>"id", :category=>"category", :name=>"name", :photoUrls=>"photoUrls", :tags=>"tags", :status=>"status"])
Swagger.name_map(::Type{ Pet }) = _name_map_Pet
Swagger.field_map(::Type{ Pet }) = _field_map_Pet

const _allowed_Pet_status = ["available", "pending", "sold"]

function check_required(o::Pet)
    (o.name === nothing) && (return false)
    (o.photoUrls === nothing) && (return false)
    true
end

function validate_field(o::Pet, name::Symbol, val)
    if name === :status
        Swagger.validate_param(name, "Pet", :enum, val, _allowed_Pet_status)
    end
end
