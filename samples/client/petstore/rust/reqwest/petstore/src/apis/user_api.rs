/*
 * OpenAPI Petstore
 *
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

#[allow(unused_imports)]
use std::rc::Rc;
use std::borrow::Borrow;
use std::option::Option;

use reqwest;

use super::{Error, configuration};

pub struct UserApiClient {
    configuration: Rc<configuration::Configuration>,
}

impl UserApiClient {
    pub fn new(configuration: Rc<configuration::Configuration>) -> UserApiClient {
        UserApiClient {
            configuration,
        }
    }
}


/// struct for typed errors of method `create_user`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateUserErrors {
    // TODO Generate an enum case for each error described in schema.
    UnknownList(Vec<serde_json::Value>),
    UnknownValue(serde_json::Value),
}
/// struct for typed errors of method `create_users_with_array_input`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateUsersWithArrayInputErrors {
    // TODO Generate an enum case for each error described in schema.
    UnknownList(Vec<serde_json::Value>),
    UnknownValue(serde_json::Value),
}
/// struct for typed errors of method `create_users_with_list_input`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateUsersWithListInputErrors {
    // TODO Generate an enum case for each error described in schema.
    UnknownList(Vec<serde_json::Value>),
    UnknownValue(serde_json::Value),
}
/// struct for typed errors of method `delete_user`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteUserErrors {
    // TODO Generate an enum case for each error described in schema.
    UnknownList(Vec<serde_json::Value>),
    UnknownValue(serde_json::Value),
}
/// struct for typed errors of method `get_user_by_name`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetUserByNameErrors {
    // TODO Generate an enum case for each error described in schema.
    UnknownList(Vec<serde_json::Value>),
    UnknownValue(serde_json::Value),
}
/// struct for typed errors of method `login_user`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum LoginUserErrors {
    // TODO Generate an enum case for each error described in schema.
    UnknownList(Vec<serde_json::Value>),
    UnknownValue(serde_json::Value),
}
/// struct for typed errors of method `logout_user`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum LogoutUserErrors {
    // TODO Generate an enum case for each error described in schema.
    UnknownList(Vec<serde_json::Value>),
    UnknownValue(serde_json::Value),
}
/// struct for typed errors of method `update_user`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateUserErrors {
    // TODO Generate an enum case for each error described in schema.
    UnknownList(Vec<serde_json::Value>),
    UnknownValue(serde_json::Value),
}

pub trait UserApi {
    fn create_user(&self, body: crate::models::User) -> Result<(), Error<CreateUserErrors>>;
    fn create_users_with_array_input(&self, body: Vec<crate::models::User>) -> Result<(), Error<CreateUsersWithArrayInputErrors>>;
    fn create_users_with_list_input(&self, body: Vec<crate::models::User>) -> Result<(), Error<CreateUsersWithListInputErrors>>;
    fn delete_user(&self, username: &str) -> Result<(), Error<DeleteUserErrors>>;
    fn get_user_by_name(&self, username: &str) -> Result<crate::models::User, Error<GetUserByNameErrors>>;
    fn login_user(&self, username: &str, password: &str) -> Result<String, Error<LoginUserErrors>>;
    fn logout_user(&self, ) -> Result<(), Error<LogoutUserErrors>>;
    fn update_user(&self, username: &str, body: crate::models::User) -> Result<(), Error<UpdateUserErrors>>;
}

impl UserApi for UserApiClient {
    fn create_user(&self, body: crate::models::User) -> Result<(), Error<CreateUserErrors>> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/user", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        req_builder = req_builder.json(&body);

        let req = req_builder.build()?;
        let mut resp = client.execute(req)?;
        if resp.status().is_success() {
            Ok(())
        } else {
            let status = resp.status();
            let content = resp.text()?;
            let entity: Option<CreateUserErrors> = serde_json::from_str(&content).ok();
            let error = crate::apis::ResponseErrorContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

    fn create_users_with_array_input(&self, body: Vec<crate::models::User>) -> Result<(), Error<CreateUsersWithArrayInputErrors>> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/user/createWithArray", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        req_builder = req_builder.json(&body);

        let req = req_builder.build()?;
        let mut resp = client.execute(req)?;
        if resp.status().is_success() {
            Ok(())
        } else {
            let status = resp.status();
            let content = resp.text()?;
            let entity: Option<CreateUsersWithArrayInputErrors> = serde_json::from_str(&content).ok();
            let error = crate::apis::ResponseErrorContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

    fn create_users_with_list_input(&self, body: Vec<crate::models::User>) -> Result<(), Error<CreateUsersWithListInputErrors>> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/user/createWithList", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        req_builder = req_builder.json(&body);

        let req = req_builder.build()?;
        let mut resp = client.execute(req)?;
        if resp.status().is_success() {
            Ok(())
        } else {
            let status = resp.status();
            let content = resp.text()?;
            let entity: Option<CreateUsersWithListInputErrors> = serde_json::from_str(&content).ok();
            let error = crate::apis::ResponseErrorContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

    fn delete_user(&self, username: &str) -> Result<(), Error<DeleteUserErrors>> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/user/{username}", configuration.base_path, username=crate::apis::urlencode(username));
        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        let req = req_builder.build()?;
        let mut resp = client.execute(req)?;
        if resp.status().is_success() {
            Ok(())
        } else {
            let status = resp.status();
            let content = resp.text()?;
            let entity: Option<DeleteUserErrors> = serde_json::from_str(&content).ok();
            let error = crate::apis::ResponseErrorContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

    fn get_user_by_name(&self, username: &str) -> Result<crate::models::User, Error<GetUserByNameErrors>> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/user/{username}", configuration.base_path, username=crate::apis::urlencode(username));
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        let req = req_builder.build()?;
        let mut resp = client.execute(req)?;
        if resp.status().is_success() {
            Ok(resp.json()?)
        } else {
            let status = resp.status();
            let content = resp.text()?;
            let entity: Option<GetUserByNameErrors> = serde_json::from_str(&content).ok();
            let error = crate::apis::ResponseErrorContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

    fn login_user(&self, username: &str, password: &str) -> Result<String, Error<LoginUserErrors>> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/user/login", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        req_builder = req_builder.query(&[("username", &username.to_string())]);
        req_builder = req_builder.query(&[("password", &password.to_string())]);
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        let req = req_builder.build()?;
        let mut resp = client.execute(req)?;
        if resp.status().is_success() {
            Ok(resp.json()?)
        } else {
            let status = resp.status();
            let content = resp.text()?;
            let entity: Option<LoginUserErrors> = serde_json::from_str(&content).ok();
            let error = crate::apis::ResponseErrorContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

    fn logout_user(&self, ) -> Result<(), Error<LogoutUserErrors>> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/user/logout", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        let req = req_builder.build()?;
        let mut resp = client.execute(req)?;
        if resp.status().is_success() {
            Ok(())
        } else {
            let status = resp.status();
            let content = resp.text()?;
            let entity: Option<LogoutUserErrors> = serde_json::from_str(&content).ok();
            let error = crate::apis::ResponseErrorContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

    fn update_user(&self, username: &str, body: crate::models::User) -> Result<(), Error<UpdateUserErrors>> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/user/{username}", configuration.base_path, username=crate::apis::urlencode(username));
        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        req_builder = req_builder.json(&body);

        let req = req_builder.build()?;
        let mut resp = client.execute(req)?;
        if resp.status().is_success() {
            Ok(())
        } else {
            let status = resp.status();
            let content = resp.text()?;
            let entity: Option<UpdateUserErrors> = serde_json::from_str(&content).ok();
            let error = crate::apis::ResponseErrorContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

}
