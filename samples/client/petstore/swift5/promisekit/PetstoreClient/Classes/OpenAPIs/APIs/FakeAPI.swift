//
// FakeAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct FakeAPI {
    /**
     - POST /fake/outer/boolean
     - Test serialization of outer boolean types
     - parameter body: (body) Input boolean as post body (optional)
     - returns: RequestBuilder<Bool> 
     */
    public func fakeOuterBooleanSerialize(body: Bool? = nil) -> RequestBuilder<Bool> {
        let path = "/fake/outer/boolean"
        let parameters = Parameters(
            query: nil,
            form: nil,
            body: AnyEncodable(body))
        return RequestBuilder<Bool>(endpoint: path, method: "POST", parameters: parameters)
    }

    /**
     - POST /fake/outer/composite
     - Test serialization of object with outer number type
     - parameter body: (body) Input composite as post body (optional)
     - returns: RequestBuilder<OuterComposite> 
     */
    public func fakeOuterCompositeSerialize(body: OuterComposite? = nil) -> RequestBuilder<OuterComposite> {
        let path = "/fake/outer/composite"
        let parameters = Parameters(
            query: nil,
            form: nil,
            body: AnyEncodable(body))
        return RequestBuilder<OuterComposite>(endpoint: path, method: "POST", parameters: parameters)
    }

    /**
     - POST /fake/outer/number
     - Test serialization of outer number types
     - parameter body: (body) Input number as post body (optional)
     - returns: RequestBuilder<Double> 
     */
    public func fakeOuterNumberSerialize(body: Double? = nil) -> RequestBuilder<Double> {
        let path = "/fake/outer/number"
        let parameters = Parameters(
            query: nil,
            form: nil,
            body: AnyEncodable(body))
        return RequestBuilder<Double>(endpoint: path, method: "POST", parameters: parameters)
    }

    /**
     - POST /fake/outer/string
     - Test serialization of outer string types
     - parameter body: (body) Input string as post body (optional)
     - returns: RequestBuilder<String> 
     */
    public func fakeOuterStringSerialize(body: String? = nil) -> RequestBuilder<String> {
        let path = "/fake/outer/string"
        let parameters = Parameters(
            query: nil,
            form: nil,
            body: AnyEncodable(body))
        return RequestBuilder<String>(endpoint: path, method: "POST", parameters: parameters)
    }

    /**
     - PUT /fake/body-with-file-schema
     - For this test, the body for this request much reference a schema named `File`.
     - parameter body: (body)  
     - returns: RequestBuilder<Void> 
     */
    public func testBodyWithFileSchema(body: FileSchemaTestClass) -> RequestBuilder<Void> {
        let path = "/fake/body-with-file-schema"
        let parameters = Parameters(
            query: nil,
            form: nil,
            body: AnyEncodable(body))
        return RequestBuilder<Void>(endpoint: path, method: "PUT", parameters: parameters)
    }

    /**
     - PUT /fake/body-with-query-params
     - parameter query: (query)  
     - parameter body: (body)  
     - returns: RequestBuilder<Void> 
     */
    public func testBodyWithQueryParams(query: String, body: User) -> RequestBuilder<Void> {
        let path = "/fake/body-with-query-params"
        let parameters = Parameters(
            query: ["query": query],
            form: nil,
            body: AnyEncodable(body))
        return RequestBuilder<Void>(endpoint: path, method: "PUT", parameters: parameters)
    }

    /**
     To test \"client\" model
     - PATCH /fake
     - To test \"client\" model
     - parameter body: (body) client model 
     - returns: RequestBuilder<Client> 
     */
    public func testClientModel(body: Client) -> RequestBuilder<Client> {
        let path = "/fake"
        let parameters = Parameters(
            query: nil,
            form: nil,
            body: AnyEncodable(body))
        return RequestBuilder<Client>(endpoint: path, method: "PATCH", parameters: parameters)
    }

    /**
     Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트 
     - POST /fake
     - Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트 
     - BASIC:
       - type: http
       - name: http_basic_test
     - parameter number: (form) None 
     - parameter double: (form) None 
     - parameter patternWithoutDelimiter: (form) None 
     - parameter byte: (form) None 
     - parameter integer: (form) None (optional)
     - parameter int32: (form) None (optional)
     - parameter int64: (form) None (optional)
     - parameter float: (form) None (optional)
     - parameter string: (form) None (optional)
     - parameter binary: (form) None (optional)
     - parameter date: (form) None (optional)
     - parameter dateTime: (form) None (optional)
     - parameter password: (form) None (optional)
     - parameter callback: (form) None (optional)
     - returns: RequestBuilder<Void> 
     */
    public func testEndpointParameters(number: Double, double: Double, patternWithoutDelimiter: String, byte: Data, integer: Int? = nil, int32: Int? = nil, int64: Int64? = nil, float: Float? = nil, string: String? = nil, binary: URL? = nil, date: Date? = nil, dateTime: Date? = nil, password: String? = nil, callback: String? = nil) -> RequestBuilder<Void> {
        let path = "/fake"
        let parameters = Parameters(
            query: nil,
            form: ["integer": integer?.description, "int32": int32?.description, "int64": int64?.description, "number": number.description, "float": float?.description, "double": double.description, "string": string, "pattern_without_delimiter": patternWithoutDelimiter, "byte": byte.description, "binary": binary?.description, "date": date?.description, "dateTime": dateTime?.description, "password": password, "callback": callback],
            body: nil)
        return RequestBuilder<Void>(endpoint: path, method: "POST", parameters: parameters)
    }

    /**
     * enum for parameter enumHeaderStringArray
     */
    public enum EnumHeaderStringArray_testEnumParameters: String {
        case greaterThan = ">"
        case dollar = "$"
    }

    /**
     * enum for parameter enumHeaderString
     */
    public enum EnumHeaderString_testEnumParameters: String {
        case abc = "_abc"
        case efg = "-efg"
        case xyz = "(xyz)"
    }

    /**
     * enum for parameter enumQueryStringArray
     */
    public enum EnumQueryStringArray_testEnumParameters: String {
        case greaterThan = ">"
        case dollar = "$"
    }

    /**
     * enum for parameter enumQueryString
     */
    public enum EnumQueryString_testEnumParameters: String {
        case abc = "_abc"
        case efg = "-efg"
        case xyz = "(xyz)"
    }

    /**
     * enum for parameter enumQueryInteger
     */
    public enum EnumQueryInteger_testEnumParameters: Int {
        case _1 = 1
        case number2 = -2
    }

    /**
     * enum for parameter enumQueryDouble
     */
    public enum EnumQueryDouble_testEnumParameters: Double {
        case _11 = 1.1
        case number12 = -1.2
    }

    /**
     * enum for parameter enumFormStringArray
     */
    public enum EnumFormStringArray_testEnumParameters: String {
        case greaterThan = ">"
        case dollar = "$"
    }

    /**
     * enum for parameter enumFormString
     */
    public enum EnumFormString_testEnumParameters: String {
        case abc = "_abc"
        case efg = "-efg"
        case xyz = "(xyz)"
    }

    /**
     To test enum parameters
     - GET /fake
     - To test enum parameters
     - parameter enumHeaderStringArray: (header) Header parameter enum test (string array) (optional)
     - parameter enumHeaderString: (header) Header parameter enum test (string) (optional, default to .-efg)
     - parameter enumQueryStringArray: (query) Query parameter enum test (string array) (optional)
     - parameter enumQueryString: (query) Query parameter enum test (string) (optional, default to .-efg)
     - parameter enumQueryInteger: (query) Query parameter enum test (double) (optional)
     - parameter enumQueryDouble: (query) Query parameter enum test (double) (optional)
     - parameter enumFormStringArray: (form) Form parameter enum test (string array) (optional, default to .$)
     - parameter enumFormString: (form) Form parameter enum test (string) (optional, default to .-efg)
     - returns: RequestBuilder<Void> 
     */
    public func testEnumParameters(enumHeaderStringArray: [String]? = nil, enumHeaderString: EnumHeaderString_testEnumParameters? = nil, enumQueryStringArray: [String]? = nil, enumQueryString: EnumQueryString_testEnumParameters? = nil, enumQueryInteger: EnumQueryInteger_testEnumParameters? = nil, enumQueryDouble: EnumQueryDouble_testEnumParameters? = nil, enumFormStringArray: [String]? = nil, enumFormString: EnumFormString_testEnumParameters? = nil) -> RequestBuilder<Void> {
        let path = "/fake"
        let parameters = Parameters(
            query: ["enum_query_string_array": enumQueryStringArray, "enum_query_string": enumQueryString, "enum_query_integer": enumQueryInteger, "enum_query_double": enumQueryDouble],
            form: ["enum_form_string_array": enumFormStringArray?.description, "enum_form_string": enumFormString?.rawValue],
            body: nil)
        return RequestBuilder<Void>(endpoint: path, method: "GET", parameters: parameters)
    }

    /**
     Fake endpoint to test group parameters (optional)
     - DELETE /fake
     - Fake endpoint to test group parameters (optional)
     - parameter requiredStringGroup: (query) Required String in group parameters 
     - parameter requiredBooleanGroup: (header) Required Boolean in group parameters 
     - parameter requiredInt64Group: (query) Required Integer in group parameters 
     - parameter stringGroup: (query) String in group parameters (optional)
     - parameter booleanGroup: (header) Boolean in group parameters (optional)
     - parameter int64Group: (query) Integer in group parameters (optional)
     - returns: RequestBuilder<Void> 
     */
    public func testGroupParameters(requiredStringGroup: Int, requiredBooleanGroup: Bool, requiredInt64Group: Int64, stringGroup: Int? = nil, booleanGroup: Bool? = nil, int64Group: Int64? = nil) -> RequestBuilder<Void> {
        let path = "/fake"
        let parameters = Parameters(
            query: ["required_string_group": requiredStringGroup, "required_int64_group": requiredInt64Group, "string_group": stringGroup, "int64_group": int64Group],
            form: nil,
            body: nil)
        return RequestBuilder<Void>(endpoint: path, method: "DELETE", parameters: parameters)
    }

    /**
     test inline additionalProperties
     - POST /fake/inline-additionalProperties
     - parameter param: (body) request body 
     - returns: RequestBuilder<Void> 
     */
    public func testInlineAdditionalProperties(param: [String: String]) -> RequestBuilder<Void> {
        let path = "/fake/inline-additionalProperties"
        let parameters = Parameters(
            query: nil,
            form: nil,
            body: AnyEncodable(param))
        return RequestBuilder<Void>(endpoint: path, method: "POST", parameters: parameters)
    }

    /**
     test json serialization of form data
     - GET /fake/jsonFormData
     - parameter param: (form) field1 
     - parameter param2: (form) field2 
     - returns: RequestBuilder<Void> 
     */
    public func testJsonFormData(param: String, param2: String) -> RequestBuilder<Void> {
        let path = "/fake/jsonFormData"
        let parameters = Parameters(
            query: nil,
            form: ["param": param, "param2": param2],
            body: nil)
        return RequestBuilder<Void>(endpoint: path, method: "GET", parameters: parameters)
    }

}
