# add to utils.R
{{#allowableValues}}
.parse_{{name}} <- function(vals) {
    res <- gsub("^\\[|\\]$", "",
        "{{values}}"
    )
    htmlEncoded <- any(grepl("[&;]", res))
    if (htmlEncoded && !requireNamespace("xml2", quietly = TRUE))
        stop("Install 'xml2' package for converting html encoded characters")
    if (htmlEncoded) {
        html2txt <- function(str) {
            xml2::xml_text(
                xml2::read_html(
                    paste0("<x>", str, "</x>")
                )
            )
        }
        res <- html2txt(res)
    }
    unlist(strsplit(res, ", "))
}

#' @export
{{classname}} <- R6::R6Class(
    "{{classname}}",
    public = list(
        `{{name}}` = NULL,
        initialize = function({{#requiredVars}}`{{baseName}}`{{#hasMore}}, {{/hasMore}}{{/requiredVars}}{{#optionalVars}}{{#-first}}{{#requiredVars.0}}, {{/requiredVars.0}}{{/-first}}`{{baseName}}`={{#defaultValue}}{{{.}}}{{/defaultValue}}{{^defaultValue}}NULL{{/defaultValue}}{{^-last}}, {{/-last}}{{/optionalVars}}, ...) {
            local.optional.var <- list(...)
            val <- unlist(local.optional.var)
            enumvec <- .parse_{{name}}()

            stopifnot(length(val) == 1L)

            if (!val %in% enumvec)
                stop("Use one of the valid values: ",
                    paste0(enumvec, collapse = ", "))
            self$`{{name}}` <- val
        },
        toJSON = function() {
            jsonlite::toJSON(self$`{{name}}`, auto_unbox = TRUE)
        },
        fromJSON = function() {
            self$`{{name}}` <- jsonlite::fromJSON({{classname}}Json,
                simplifyVector = FALSE)
            self
        },
        toJSONString = function() {
            as.character(jsonlite::toJSON(self$`{{name}}`,
                auto_unbox = TRUE))
        },
        fromJSONString = function() {
            self$`{{name}}` <- jsonlite::fromJSON({{classname}}Json,
                simplifyVector = FALSE)
            self
        }
    )
)
{{/allowableValues}}
